{"version":3,"sources":["logo.svg","serviceWorker.js","contact-us/contact.us.component.js","home/home.component.js","products/products.service.js","products/products.component.js","products/product.component.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","ContactUsComponent","React","Component","HomeComponent","className","src","logo","alt","to","ProductService","products","id","filter","el","Id","pop","ProductsComponent","getProducts","cards","this","forEach","product","push","getCard","Card","style","width","display","Img","variant","process","ImageUrl","height","Body","Title","Name","Text","Description","Button","href","ProductComponent","props","console","log","productId","params","getProductById","Image","thumbnail","routing","basename","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kC,yzBCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kCCVSC,E,uKAJP,OAAO,8D,GAFkBC,IAAMC,WCoBxBC,E,uKAfP,OACI,yBAAKC,UAAU,OACX,4BAAQA,UAAU,cACd,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,6EAGA,kBAAC,IAAD,CAAMC,GAAG,aAAT,aACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,oB,GAVQP,IAAMC,W,QCFrBO,EAAb,WACI,aAAc,oBADlB,+DAMQ,OAAOC,IANf,qCAS0BC,GAClB,OAAOD,EAASE,QAAO,SAAAC,GAAE,OAAIA,EAAGC,IAAMH,KAAII,UAVlD,K,gBC0CeC,E,kDApCX,aAAe,IAAD,8BACV,gBACKN,SAAW,GAChB,EAAKA,SAAWD,EAAeQ,cAHrB,E,qDAMJ,IAAD,OACDC,EAAQ,GAIZ,OAHAC,KAAKT,SAASU,SAAQ,SAAAC,GAClBH,EAAMI,KAAK,EAAKC,QAAQF,OAGxB,6BACI,yDACCH,K,8BAILG,GACJ,OACI,kBAACG,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,QAASC,QAAS,iBACpC,kBAACH,EAAA,EAAKI,IAAN,CAAUC,QAAQ,MAAMxB,IAAKyB,kBAAyBT,EAAQU,SAAUC,OAAO,MAAMN,MAAM,QAC3F,kBAACF,EAAA,EAAKS,KAAN,KACI,kBAACT,EAAA,EAAKU,MAAN,KAAab,EAAQc,MACrB,kBAACX,EAAA,EAAKY,KAAN,KACKf,EAAQgB,aAEb,kBAAC,IAAD,CAAM7B,GAAI,YAAYa,EAAQP,IAC1B,kBAACwB,EAAA,EAAD,CAAQT,QAAQ,UAAUU,KAAM,YAAYlB,EAAQP,IAApD,uB,GA/BQb,IAAMC,W,QCyBvBsC,E,kDAvBX,WAAYC,GAAQ,IAAD,6BACf,cAAMA,GACNC,QAAQC,IAAI,SAEZ,EAAKC,UAAYH,EAAM1C,MAAM8C,OAAOlC,GACpC+B,QAAQC,IAAI,EAAKC,WACjB,EAAKvB,QAAUZ,EAAeqC,eAAe,EAAKF,WAClDF,QAAQC,IAAI,EAAKtB,SACjB,EAAKX,SAAW,GAChB,EAAKA,SAAWD,EAAeQ,cAThB,E,qDAaf,OACI,6BACI,kBAAC8B,EAAA,EAAD,CAAO1C,IAAKyB,kBAAyBX,KAAKE,QAAQU,SAAUC,OAAO,MAAMN,MAAM,MAAMsB,WAAS,IAAG,6BACjG,qCAAW7B,KAAKyB,WAAiB,6BACjC,uCAAazB,KAAKE,QAAQc,MAAY,6BACtC,8CAAoBhB,KAAKE,QAAQgB,aAAmB,kC,GArBrCpC,IAAMC,WCU/B+C,EACJ,kBAAC,IAAD,CAAYC,SAAS,KACnB,6BACE,kBAAC,IAAD,CAAOC,KAAK,QAAQC,UAAWjD,IAC/B,kBAAC,IAAD,CAAOgD,KAAK,YAAYC,UAAWpC,IACnC,kBAAC,IAAD,CAAOmC,KAAK,eAAeC,UAAWZ,IACtC,kBAAC,IAAD,CAAOW,KAAK,WAAWC,UAAWpD,MAKxCqD,IAASC,OACPL,EACAM,SAASC,eAAe,SNuGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.44778292.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nclass ContactUsComponent extends React.Component {\n    render() {\n        return <h1>Hello, Contactus Component</h1>;\n    }\n}\n\nexport default ContactUsComponent;","import React from 'react';\nimport logo from '../logo.svg';\nimport '../App.css';\nimport { Link } from 'react-router-dom'\n\nclass HomeComponent extends React.Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <p>\n                    Welcome to JB Bio Medical Equipments Showcase!\n                    </p>\n                    <Link to=\"/products\">Catalogue</Link>\n                    <Link to=\"/contact\">Contact Us</Link>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default HomeComponent","import { Product } from './product';\nimport products from './products.json';\n\nexport class ProductService{\n    constructor(){\n\n    }\n\n    static getProducts(){\n        return products;\n    }\n\n    static getProductById(id): Product{\n        return products.filter(el => el.Id == id).pop();\n    }\n}","import React from 'react';\nimport { Product } from './product';\nimport { ProductService } from './products.service'\nimport { Card, Button } from 'react-bootstrap';\nimport { Link } from 'react-router-dom'\n\nclass ProductsComponent extends React.Component {\n    products: Product[];\n\n    constructor() {\n        super();\n        this.products = [];\n        this.products = ProductService.getProducts();\n    }\n\n    render() {\n        let cards = [];\n        this.products.forEach(product => {\n            cards.push(this.getCard(product));\n        })\n        return (\n            <div>\n                <h1>Hello, Products Component</h1>\n                {cards}\n            </div>);\n    }\n\n    getCard(product) {\n        return (\n            <Card style={{ width: '18rem', display: \"inline-block\" }}>\n                <Card.Img variant=\"top\" src={process.env.PUBLIC_URL + product.ImageUrl} height=\"100\" width=\"150\" />\n                <Card.Body>\n                    <Card.Title>{product.Name}</Card.Title>\n                    <Card.Text>\n                        {product.Description}\n                    </Card.Text>\n                    <Link to={\"/product/\"+product.Id}>\n                        <Button variant=\"primary\" href={\"/product/\"+product.Id}>Go somewhere</Button>\n                    </Link>\n                </Card.Body>\n            </Card>\n        )\n    }\n}\n\nexport default ProductsComponent","import React from 'react';\nimport { Product } from './product';\nimport { ProductService } from './products.service'\nimport { Col, Row, Container, Image } from 'react-bootstrap';\n\nclass ProductComponent extends React.Component {\n    products: Product[];\n\n    constructor(props) {\n        super(props);\n        console.log(\"props\")\n        \n        this.productId = props.match.params.id;\n        console.log(this.productId)\n        this.product = ProductService.getProductById(this.productId)\n        console.log(this.product)\n        this.products = [];\n        this.products = ProductService.getProducts();\n    }\n\n    render() {\n        return (\n            <div>\n                <Image src={process.env.PUBLIC_URL + this.product.ImageUrl} height=\"100\" width=\"150\" thumbnail /><br/>\n                <span>Id: {this.productId}</span><br/>\n                <span>Name: {this.product.Name}</span><br/>\n                <span>Description: {this.product.Description}</span><br/>\n            </div>);\n    }\n}\n\nexport default ProductComponent","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, Link, BrowserRouter as Router, HashRouter, Switch } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n//Routing\nimport ContactUsComponent from './contact-us/contact.us.component'\nimport HomeComponent from './home/home.component'\nimport ProductsComponent from './products/products.component'\nimport ProductComponent from './products/product.component'\n\n\nconst routing = (\n  <HashRouter basename=\"/\">\n    <div>\n      <Route path=\"/home\" component={HomeComponent} />\n      <Route path=\"/products\" component={ProductsComponent} />\n      <Route path=\"/product/:id\" component={ProductComponent} />\n      <Route path=\"/contact\" component={ContactUsComponent} />\n    </div>\n  </HashRouter>\n)\n\nReactDOM.render(\n  routing,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}